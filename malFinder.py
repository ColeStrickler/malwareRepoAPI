import requests
import sys
import concurrent.futures
import time



# Author: Cole Strickler
# Description: Finds malware samples given their hash values
# Date: 7/25/2022
# Dependencies: requests(pip3 install requests), concurrent.futures(pip3 install concurrent.futures)
# USAGE: python3 ./malFinder.py [.\Pathto\InputFile] [MalShare API Key] [HybridAnalysis API Key]


input_file = sys.argv[1]
try:
    MALSHARE_API_KEY = sys.argv[2]
except Exception:
    MALSHARE_API_KEY = None
    print("Better results with MalShare API key. Get yours ---> https://malshare.com/register.php")
try:
    HYBRID_ANALYSIS_API_KEY = sys.argv[3]
except Exception:
    print("Better results with MalShare API key. Get yours ---> https://malshare.com/register.php\n\n")
    HYBRID_ANALYSIS_API_KEY = None

time.sleep(2)

def parse_input_list(file):
    retlist = []
    with open(file, "r") as f:
        for line in f.readlines():
            retlist.append(line.strip())
    return retlist




def malbazaarlookup(hash):
    data = {'query': 'get_info', 'hash': hash}
    url = "https://mb-api.abuse.ch/api/v1/"
    response = requests.post(url, data=data)

    if response.json()["query_status"] == 'hash_not_found':
        pass
    else:
        try:
            sha256 = response.json()["data"][0]["sha256_hash"]
            print(f"{hash} FOUND ---> https://bazaar.abuse.ch/sample/{sha256}")
        except Exception:
            pass




def hybrid_analysis_lookup(hash):
    global HYBRID_ANALYSIS_API_KEY
    url = "https://www.hybrid-analysis.com/api/v2/search/hash"
    headers = {'User-Agent': 'Falcon Sandbox', 'api-key': HYBRID_ANALYSIS_API_KEY}
    data = {'hash': hash}
    response = requests.post(url, headers=headers, data=data)

    if response.status_code == 200:
        try:
            sha256 = response.json()[0]['sha256']
            print(f"{hash} FOUND ---> https://www.hybrid-analysis.com/sample/{sha256}")
        except Exception:
            pass



def malshare_lookup(hash):
    global MALSHARE_API_KEY
    url = f"https://www.malshare.com/api.php?api_key={MALSHARE_API_KEY}&action=details&hash={hash}"
    response = requests.get(url)

    if response.status_code == 200:
        try:
            sha256 = response.json()['SHA256']
            print(f"{hash} FOUND ---> https://malshare.com/sample.php?action=detail&hash={sha256}")
        except Exception:
            pass



hash_list = parse_input_list(input_file)

print(r"""        
                                        _,aggdd888bbgg,,_
                                    ,ad88888YYYYYYYYYYY8888ba,
                                 ,d888P""'              ``""Y88b,
                               ,d888"'                       "Y888,
                              d88P'                            `Y88b,
                            ,d88'                                `Y88,
                           ,888'                                  `Y88,
                          ,d88'            /\ .---._               `Y8b,
                          d88'          /\/.-. /\ /\/\              `88I
                         ,88P          //\\oo //\\/\\\\              I88
                         I88I         //  /"/`---\\ \\"`-._          I88
                         I88I      _.-'"           "`-.`-.           I8I
                         `888,             malFinder                 d8I
                          `888,                                     d88'
                           `888,                                   d8PI
                           ,dP"8b,                               ,8P'd'
                         ,dP'   "Yb,                          _,d8" P'
                       ,dP' ,db,  "Yb,_                    ,ad8P" ,P'
                     ,dP' ,d8888b,  `"Yba,,__        __,ad88P"  ,d"
                   ,dP' ,d88888888b,    "88Y8888888888PP""   _,d"
                 ,dP' ,d888888888888P  ,d"8              _,gd"'
               ,dP' ,d888888888888P' ,d" ,8bbaagggggaaddP""'
             ,dP' ,d888888888888P' ,d" ,d"'
           ,dP' ,d888888888888P' ,d" ,d"
         ,dP' ,d888888888888P' ,d" ,d"         Dev
       ,dP' ,d888888888888P' ,d" ,d"       Cole Strickler
     ,dP' ,d888888888888P' ,d" ,d"
   ,dP' ,d888888888888P' ,d" ,d"
 ,dP' ,d888888888888P' ,d" ,d"
dP'  d888888888888P' ,d" ,d" 
8"Ya, `888888888P' ,d" ,d"
8  "Ya, `88888P' ,d" ,d"
8a,  "Ya, `8P' ,d" ,d"
 "Ya,  "Ya,  ,d" ,d"
   "Ya,  "Y8P" ,d"
     "Ya,  8 ,d"
       "Ya,8d"
         "YP

""")




if HYBRID_ANALYSIS_API_KEY:
    with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.map(hybrid_analysis_lookup, hash_list)

with concurrent.futures.ThreadPoolExecutor() as executor:
    executor.map(malbazaarlookup, hash_list)

if MALSHARE_API_KEY:
    with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.map(malshare_lookup, hash_list)




